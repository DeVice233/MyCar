        @{
    ViewData["Title"] = "Home Page";
}
@*
@if (User.IsInRole("Администратор") && TempData["AllertMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
    @TempData["AllertMessage"];
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

}
else
{
    <div></div>
}*@

<div class="container-fluid">
    <div class="row" >
            <div class="col-12">
                <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
                    </div>
                    <div class="carousel-inner">
                        
                        <div class="carousel-item active">
                            <img src="images/13.jpg" class="d-block w-100" alt="Надпись заглушка" >
                        </div>
                        
                        <div class="carousel-item">
                            <img src="images/ex_1.jpg" class="d-block w-100" alt="Надпись заглушка">
                        </div>
                        
                        <div class="carousel-item">
                            <img src="images/19.jpg" class="d-block w-100" alt="Надпись заглушка">
                        </div>
                        
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Назад</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Вперед</span>
                    </button>
                </div>
            </div>
        </div>
<div class="slider" id="slider"> 
    <div class="slider-content" id="slider-content">
        <div class="sl-img">
            <div class="sl-img-item sl-img-item-active" data-id="1"><img src="https://toppng.com/uploads/preview/mercedes-benz-cls350-amg-mercedes-machine-white-buildings-city-11569995130t8e9jqggio.jpg"/></div>
            <div class="sl-img-item" data-id="2"><img src="https://upload.wikimedia.org/wikipedia/commons/b/bb/Sauber-Mercedes_C9%2C_Bj._1988_%282009-08-07_Sp%29.jpg"/></div>
            <div class="sl-img-item" data-id="3"><img src="https://motor.ru/imgs/2021/03/25/07/4577323/db922858561d4e3cb98cf37db34efbff8a42269a.jpg"/></div>
            <div class="sl-img-item" data-id="4"><img src="photo-4.jpg"/></div>
            <div class="sl-img-item" data-id="5"><img src="photo-5.jpg"/></div>
            <div class="sl-img-item" data-id="6"><img src="photo-6.jpg"/></div>
        </div>
        <div class="sl-text">
            <div class="sl-text-item sl-text-item-active" data-id="1">
                <div class="sl-text-item-head">
                    <h3>Mersedez-350 sl</h3>
                </div>
                <div class="sl-text-item-info">
                    <p>Национальный Парк Йеллоустоун</p>
                </div>
            </div>
            <div class="sl-text-item" data-id="2">
                <div class="sl-text-item-head">
                    <h3>Mersedez Group-C</h3>
                </div>
                <div class="sl-text-item-info">
                    <p>Мальдивские Острова</p>
                </div>
            </div>
            <div class="sl-text-item" data-id="3">
                <div class="sl-text-item-head">
                    <h3>Toyota Camry</h3>
                </div>
                <div class="sl-text-item-info">
                    <p>Шотландия</p>
                </div>
            </div>
            <div class="sl-text-item" data-id="4">
                <div class="sl-text-item-head">
                    <h3>Озеро Ирен</h3>
                </div>
                <div class="sl-text-item-info">
                    <p>Национальный парк Роки-Маунтин</p>
                </div>
            </div>
            <div class="sl-text-item" data-id="5">
                <div class="sl-text-item-head">
                    <h3>Енот</h3>
                </div>
                <div class="sl-text-item-info"></div>
            </div>
            <div class="sl-text-item" data-id="6">
                <div class="sl-text-item-head"></div>
                <div class="sl-text-item-info">
                    <p>Синица</p>    
                </div>
            </div>            
        </div>
    </div>
    <div class="slider__nav">
        <div class="sl-nav-arrows">
            <div class="sl-nav-arrow sl-nav-arrow-left" id="left">Лево</div>
            <div class="sl-nav-arrow sl-nav-arrow-right" id="right">Право</div>
        </div>
        <div class="sl-nav-dots" id="sl-nav-dots">
            <div class="sl-nav-dot sl-nav-dot-active" data-id="1"></div>
            <div class="sl-nav-dot" data-id="2"></div>
            <div class="sl-nav-dot" data-id="3"></div>
            <div class="sl-nav-dot" data-id="4"></div>
            <div class="sl-nav-dot" data-id="5"></div>
            <div class="sl-nav-dot" data-id="6"></div>
        </div>
    </div>
</div>
    </div>

  <!-- Marketing messaging and featurettes
  ================================================== -->
  <!-- Wrap the rest of the page in another container to center all the content. -->

  <div class="container marketing">

    <!-- Three columns of text below the carousel -->
    <div class="row">
      <div class="col-lg-4">
        <svg class="bd-placeholder-img rounded-circle" width="140" height="140" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 140x140" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#777"></rect><text x="50%" y="50%" fill="#777" dy=".3em">140x140</text></svg>

        <h2 class="fw-normal">Heading</h2>
        <p>Some representative placeholder content for the three columns of text below the carousel. This is the first column.</p>
        <p><a class="btn btn-secondary" href="#">View details »</a></p>
      </div><!-- /.col-lg-4 -->
      <div class="col-lg-4">
        <svg class="bd-placeholder-img rounded-circle" width="140" height="140" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 140x140" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#777"></rect><text x="50%" y="50%" fill="#777" dy=".3em">140x140</text></svg>

        <h2 class="fw-normal">Heading</h2>
        <p>Another exciting bit of representative placeholder content. This time, we've moved on to the second column.</p>
        <p><a class="btn btn-secondary" href="#">View details »</a></p>
      </div><!-- /.col-lg-4 -->
      <div class="col-lg-4">
        <svg class="bd-placeholder-img rounded-circle" width="140" height="140" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 140x140" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#777"></rect><text x="50%" y="50%" fill="#777" dy=".3em">140x140</text></svg>

        <h2 class="fw-normal">Heading</h2>
        <p>And lastly this, the third column of representative placeholder content.</p>
        <p><a class="btn btn-secondary" href="#">View details »</a></p>
      </div><!-- /.col-lg-4 -->
    </div><!-- /.row -->


    <!-- START THE FEATURETTES -->

    <hr class="featurette-divider">

    <div class="row featurette">
      <div class="col-md-7">
        <h2 class="featurette-heading fw-normal lh-1">First featurette heading. <span class="text-muted">It’ll blow your mind.</span></h2>
        <p class="lead">Some great placeholder content for the first featurette here. Imagine some exciting prose here.</p>
      </div>
      <div class="col-md-5">
        <svg class="bd-placeholder-img bd-placeholder-img-lg featurette-image img-fluid mx-auto" width="500" height="500" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 500x500" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#eee"></rect><text x="50%" y="50%" fill="#aaa" dy=".3em">500x500</text></svg>

      </div>
    </div>

    <hr class="featurette-divider">

    <div class="row featurette">
      <div class="col-md-7 order-md-2">
        <h2 class="featurette-heading fw-normal lh-1">Oh yeah, it’s that good. <span class="text-muted">See for yourself.</span></h2>
        <p class="lead">Another featurette? Of course. More placeholder content here to give you an idea of how this layout would work with some actual real-world content in place.</p>
      </div>
      <div class="col-md-5 order-md-1">
        <svg class="bd-placeholder-img bd-placeholder-img-lg featurette-image img-fluid mx-auto" width="500" height="500" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 500x500" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#eee"></rect><text x="50%" y="50%" fill="#aaa" dy=".3em">500x500</text></svg>

      </div>
    </div>

    <hr class="featurette-divider">

    <div class="row featurette">
      <div class="col-md-7">
        <h2 class="featurette-heading fw-normal lh-1">And lastly, this one. <span class="text-muted">Checkmate.</span></h2>
        <p class="lead">And yes, this is the last block of representative placeholder content. Again, not really intended to be actually read, simply here to give you a better view of what this would look like with some actual content. Your content.</p>
      </div>
      <div class="col-md-5">
        <svg class="bd-placeholder-img bd-placeholder-img-lg featurette-image img-fluid mx-auto" width="500" height="500" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 500x500" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#eee"></rect><text x="50%" y="50%" fill="#aaa" dy=".3em">500x500</text></svg>

      </div>
    </div>

    <hr class="featurette-divider">
  <footer class="container">
    <p class="float-end"><a href="#">Back to top</a></p>
    <p>© 2017–2022 Company, Inc. · <a href="#">Privacy</a> · <a href="#">Terms</a></p>
  </footer>
</div>

@if (User.IsInRole("Администратор") && TempData["AllertMessage"] != null)
{
    <div class="callout" data-bs-dismiss="alert" role="alert">
    <div class="callout-header">Window Role</div>
    <span class="closebtn" onclick="this.parentElement.style.display='none';">&times;</span>
    <div class="callout-container">
    <p>You Sign In as Admin</p>
    </div>
    </div>
}
else
{
    <div></div>
}
        
        
        //[HttpGet("Password, UserName, FirstName, LastName, Patronymic, Telephone, Email")]
        //public IEnumerable<UserApi> SearchByUser(int type, string text)
        //{
        //    if (type == 1)
        //    {
        //        return dbContext.Users.Where(s => s.UserName.ToLower().Contains(text)).ToList().Select(s => {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 2)
        //    {
        //        return dbContext.Users.Where(s => s.Passport.FirstName.ToLower().Contains(text)).ToList().Select(s =>
        //        {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 3)
        //    {
        //        return dbContext.Users.Where(s => s.Passport.LastName.ToLower().Contains(text)).ToList().Select(s =>
        //        {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 4)
        //    {
        //        return dbContext.Users.Where(s => s.Passport.Patronymic.ToLower().Contains(text)).ToList().Select(s =>
        //        {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 5)
        //    {
        //        return dbContext.Users.Where(s => s.Email.ToLower().Contains(text)).ToList().Select(s => {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    else
        //    {
        //        return dbContext.Users.ToList().Select(s => {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //}

        //public async Task Search(int id, string? text)
        //{
        //    if (SelectedSearchType == "Логин")
        //    {
        //        id = 1;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Фамилия")
        //    {
        //        id = 3;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Email")
        //    {
        //        id = 5;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Тип")
        //    {
        //        id = 3;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Отменить")
        //    {
        //        var users = await Api.GetListAsync<List<UserApi>>("User");
        //        searchResult = users;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //}

            //SearchStart = new CustomCommand(() =>
            //{
            //    if (SelectedSearchType == "Логин" && SearchText != "")
            //    {
            //        int i = 1;
            //        Search(i, SearchText);
            //        Users = searchResult;
            //        if (Users == null)
            //        {
            //            MessageBox.Show("Пользователь не найден");
            //            SearchText = "";
            //            SignalChanged("SearchText");
            //            GetUserList();
            //            Users = FullUsers;
            //            SignalChanged("Users");
            //        }
            //    }
            //    else if (SelectedSearchType == "Фамилия")
            //    {
            //        int i = 3;
            //        Search(i, SearchText);
            //        Users = searchResult;
            //        if (Users == null)
            //        {
            //            MessageBox.Show("Пользователь не найден");
            //            SearchText = "";
            //            SignalChanged("SearchText");
            //            GetUserList();
            //            Users = FullUsers;
            //            SignalChanged("Users");
            //        }
            //    }
            //    else if (SelectedSearchType == "Email")
            //    {
            //        int i = 5;
            //        Search(i, SearchText);
            //        Users = searchResult;
            //        if (Users == null)
            //        {
            //            MessageBox.Show("Пользователь не найден");
            //            SearchText = "";
            //            SignalChanged("SearchText");
            //            GetUserList();
            //            Users = FullUsers;
            //            SignalChanged("Users");
            //        }
            //    }
            //});

        [HttpGet("UserName, Password")]
        public async Task<ActionResult<UserApi>> Enter(string userName, byte[] Password)
        {
            var user = dbContext.Users.FirstOrDefault(s => s.UserName == userName && s.PasswordHash == Password);
            if (user == null)
            {
                NotFound();
            }
            return (UserApi)user;
        }

        [HttpPost("UserName, Password, FirstName, Email")]
        public async Task<ActionResult<long>> Registration(string UserName, byte[] Password, string Email, string FirstName, int? PassportId)
        {
            var newUser = new User();
            await dbContext.SaveChangesAsync();
            newUser.UserName = UserName;
            newUser.PasswordHash = Password;
            newUser.Email = Email;
            newUser.PassportId = PassportId;
            await dbContext.Users.AddAsync(newUser);
            await dbContext.SaveChangesAsync();
            return Ok(newUser.Id);
        }

        var passport = new Passport();
        dbContext.Passports.Add(passport);
        dbContext.SaveChanges();
        user.PassportId = passport.Id;
        dbContext.Users.Add(user);
        dbContext.SaveChanges();

            //if(type == "Артикул")
            //{
            //    return dbContext.Cars.Where(s => s.Articul == text).ToList().Select(t=> (CarApi)t);
            //}
            //if(type == "Модель")
            //{
            //    return dbContext.Cars.Where(s=> s.Model.ModelName == text).ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var model = dbContext.Models.FirstOrDefault(t => t.ModelName == text);
            //        return CreateCarApi(s, characteristics, model);
            //    });
            //}
            //if(type == "Марка")
            //{
            //    return dbContext.Cars.Where(s => s.Model.Mark.MarkName == text).ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var mark = dbContext.MarkCars.FirstOrDefault(m=> m.MarkName == text);
            //        var model = dbContext.Models.FirstOrDefault(i => i.MarkId == mark.Id);
            //        return GetMarkApi(s, characteristics, model, mark);
            //    });
            //}
            //if(type == "Цена")
            //{
            //    return dbContext.Cars.Where(s => s.CarPrice.ToString() == text).ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
            //        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
            //        return GetMarkApi(s, characteristics, model, mark);
            //    });
            //}
            //else
            //{
            //    return dbContext.Cars.ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
            //        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
            //        return GetMarkApi(s, characteristics, model, mark);
            //    });
            //}

        [HttpGet("ModelName, MarkName, Articul, CarPrice")]
        public IEnumerable<CarApi> SearchByCar(string type, string text)
        {
            switch (type)
            {
                case "Артикул":

                    return dbContext.Cars.Where(s=> s.Articul.Contains(text)).ToList().Select(s =>
                    {
                        var characteristics = dbContext.CharacteristicCars.Where(t => t.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });

                    break;
                case "Модель":

                    return dbContext.Cars.Where(s => s.Model.ModelName == text).ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.ModelName == text); 
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });

                    break;
                case "Марка":

                    return dbContext.Cars.Where(s => s.Model.Mark.MarkName == text).ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.MarkName == text);
                        return GetMarkApi(s, characteristics, model, mark);
                    });

                    break;

                case "Цена":

                    return dbContext.Cars.Where(s => s.CarPrice.ToString() == text).ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });
                    break;

                default:

                    return dbContext.Cars.ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.ModelName == text);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });
                    break;
            }
        }

        
        //public static async Task<CarApi> SearchCarAsync<CarApi>(int id, string? text, string controller)
        //{
        //    var answer = await client.GetAsync(server + controller + $"/ModelName, MarkName, Articul, CarPrice?type={id}&text={text}");
        //    string answerText = await answer.Content.ReadAsStringAsync();
        //    var result = (CarApi)JsonSerializer.Deserialize(answerText, typeof(CarApi), jsonOptions);
        //    return result;
        //}


        // GET: api/<CarController>
        //[HttpGet]
        //public IEnumerable<CarApi> Get()
        //{
        //    return dbContext.Cars.ToList().Select(s =>
        //    {
        //        var characteristics = dbContext.CharacteristicCars.Where(t => t.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
        //        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
        //        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
        //        return GetMarkApi(s, characteristics, model, mark);
        //    });
        //}

        //[HttpGet]
        //public IEnumerable<CharacteristicCarApi> Get()
        //{
        //    return dbContext.CharacteristicCars.Select(t => (CharacteristicCarApi)t).ToList().Select(s => 
        //    {
        //        var characteristic = dbContext.Characteristics.FirstOrDefault(c=> c.Id == s.CharacteristicId);
        //        var unit = dbContext.Units.FirstOrDefault(u=> u.Id == characteristic.UnitId);
        //        return GetCharacteristicCross(s, characteristic, unit);
        //    });
        //}

            foreach (CarApi carApi in Cars)
            {
                carApi.CarOptions = "";
                foreach (var options in carApi.CharacteristicCars)
                {
                    options.Characteristic = Characteristics.FirstOrDefault(s => s.ID == options.CharacteristicId);
                    if (options != carApi.CharacteristicCars.Last())
                        carApi.CarOptions += $"{options.Characteristic.CharacteristicName} {options.CharacteristicValue}, \n";
                    else
                        carApi.CarOptions += $"{options.Characteristic.CharacteristicName} {options.CharacteristicValue}";
                }
                SignalChanged(nameof(carApi.CarOptions));
            }

                    AddCarVM.Model = SelectedModel;
                    CarModels.Add(SelectedModel);
                    SignalChanged(nameof(CarModels));
                    SelectedMark.ID = (int)SelectedModel.MarkId;
            
            foreach (var characteristic in dbContext.CharacteristicCars.Where(s => s.CarId == car.Id).ToList())
            {
                characteristic.Characteristic = dbContext.Characteristics.FirstOrDefault(s => s.Id == characteristic.CharacteristicId);
                result.CarOptions += $"{characteristic.Characteristic.CharacteristicName} {characteristic.CharacteristicValue} \n";
            }

            //result.SaleCar.Car = (CarApi)dbContext.Cars.FirstOrDefault(s => s.Id == result.SaleCar.CarId);
            //result.SaleCar.Equipment = (EquipmentApi)dbContext.Equipment.FirstOrDefault(s => s.Id == result.SaleCar.EquipmentId);
            //result.SaleCar.Car.Model = (ModelApi)dbContext.Models.FirstOrDefault(s => s.Id == result.SaleCar.Car.ModelId);
            //result.SaleCar.Car.CarMark = dbContext.MarkCars.FirstOrDefault(s => s.Id == result.SaleCar.Car.Model.MarkId).MarkName;
            //result.SaleCar.Car.CharacteristicCars = dbContext.CharacteristicCars.Where(s => s.CarId == result.SaleCar.CarId).Select(t => (CharacteristicCarApi)t).ToList();
            //foreach (var s in result.SaleCar.Car.CharacteristicCars)
            //{
            //    s.Characteristic = (CharacteristicApi)dbContext.Characteristics.FirstOrDefault(c => c.Id == s.CharacteristicId);
            //}
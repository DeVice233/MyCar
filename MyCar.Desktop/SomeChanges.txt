        //[HttpGet("Password, UserName, FirstName, LastName, Patronymic, Telephone, Email")]
        //public IEnumerable<UserApi> SearchByUser(int type, string text)
        //{
        //    if (type == 1)
        //    {
        //        return dbContext.Users.Where(s => s.UserName.ToLower().Contains(text)).ToList().Select(s => {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 2)
        //    {
        //        return dbContext.Users.Where(s => s.Passport.FirstName.ToLower().Contains(text)).ToList().Select(s =>
        //        {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 3)
        //    {
        //        return dbContext.Users.Where(s => s.Passport.LastName.ToLower().Contains(text)).ToList().Select(s =>
        //        {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 4)
        //    {
        //        return dbContext.Users.Where(s => s.Passport.Patronymic.ToLower().Contains(text)).ToList().Select(s =>
        //        {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    if (type == 5)
        //    {
        //        return dbContext.Users.Where(s => s.Email.ToLower().Contains(text)).ToList().Select(s => {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //    else
        //    {
        //        return dbContext.Users.ToList().Select(s => {
        //            var passport = dbContext.Passports.FirstOrDefault(p => p.Id == s.PassportId);
        //            return CreateUserApi(s, passport);
        //        });
        //    }
        //}

        //public async Task Search(int id, string? text)
        //{
        //    if (SelectedSearchType == "Логин")
        //    {
        //        id = 1;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Фамилия")
        //    {
        //        id = 3;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Email")
        //    {
        //        id = 5;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Тип")
        //    {
        //        id = 3;
        //        var usersSearch = await Api.SearchAsync<List<UserApi>>(id, text, "User");
        //        searchResult = usersSearch;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //    else if (SelectedSearchType == "Отменить")
        //    {
        //        var users = await Api.GetListAsync<List<UserApi>>("User");
        //        searchResult = users;
        //        Users = searchResult;
        //        SignalChanged("Users");
        //    }
        //}

            //SearchStart = new CustomCommand(() =>
            //{
            //    if (SelectedSearchType == "Логин" && SearchText != "")
            //    {
            //        int i = 1;
            //        Search(i, SearchText);
            //        Users = searchResult;
            //        if (Users == null)
            //        {
            //            MessageBox.Show("Пользователь не найден");
            //            SearchText = "";
            //            SignalChanged("SearchText");
            //            GetUserList();
            //            Users = FullUsers;
            //            SignalChanged("Users");
            //        }
            //    }
            //    else if (SelectedSearchType == "Фамилия")
            //    {
            //        int i = 3;
            //        Search(i, SearchText);
            //        Users = searchResult;
            //        if (Users == null)
            //        {
            //            MessageBox.Show("Пользователь не найден");
            //            SearchText = "";
            //            SignalChanged("SearchText");
            //            GetUserList();
            //            Users = FullUsers;
            //            SignalChanged("Users");
            //        }
            //    }
            //    else if (SelectedSearchType == "Email")
            //    {
            //        int i = 5;
            //        Search(i, SearchText);
            //        Users = searchResult;
            //        if (Users == null)
            //        {
            //            MessageBox.Show("Пользователь не найден");
            //            SearchText = "";
            //            SignalChanged("SearchText");
            //            GetUserList();
            //            Users = FullUsers;
            //            SignalChanged("Users");
            //        }
            //    }
            //});

        [HttpGet("UserName, Password")]
        public async Task<ActionResult<UserApi>> Enter(string userName, byte[] Password)
        {
            var user = dbContext.Users.FirstOrDefault(s => s.UserName == userName && s.PasswordHash == Password);
            if (user == null)
            {
                NotFound();
            }
            return (UserApi)user;
        }

        [HttpPost("UserName, Password, FirstName, Email")]
        public async Task<ActionResult<long>> Registration(string UserName, byte[] Password, string Email, string FirstName, int? PassportId)
        {
            var newUser = new User();
            await dbContext.SaveChangesAsync();
            newUser.UserName = UserName;
            newUser.PasswordHash = Password;
            newUser.Email = Email;
            newUser.PassportId = PassportId;
            await dbContext.Users.AddAsync(newUser);
            await dbContext.SaveChangesAsync();
            return Ok(newUser.Id);
        }

        var passport = new Passport();
        dbContext.Passports.Add(passport);
        dbContext.SaveChanges();
        user.PassportId = passport.Id;
        dbContext.Users.Add(user);
        dbContext.SaveChanges();

            //if(type == "Артикул")
            //{
            //    return dbContext.Cars.Where(s => s.Articul == text).ToList().Select(t=> (CarApi)t);
            //}
            //if(type == "Модель")
            //{
            //    return dbContext.Cars.Where(s=> s.Model.ModelName == text).ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var model = dbContext.Models.FirstOrDefault(t => t.ModelName == text);
            //        return CreateCarApi(s, characteristics, model);
            //    });
            //}
            //if(type == "Марка")
            //{
            //    return dbContext.Cars.Where(s => s.Model.Mark.MarkName == text).ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var mark = dbContext.MarkCars.FirstOrDefault(m=> m.MarkName == text);
            //        var model = dbContext.Models.FirstOrDefault(i => i.MarkId == mark.Id);
            //        return GetMarkApi(s, characteristics, model, mark);
            //    });
            //}
            //if(type == "Цена")
            //{
            //    return dbContext.Cars.Where(s => s.CarPrice.ToString() == text).ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
            //        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
            //        return GetMarkApi(s, characteristics, model, mark);
            //    });
            //}
            //else
            //{
            //    return dbContext.Cars.ToList().Select(s => {
            //        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
            //        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
            //        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
            //        return GetMarkApi(s, characteristics, model, mark);
            //    });
            //}

        [HttpGet("ModelName, MarkName, Articul, CarPrice")]
        public IEnumerable<CarApi> SearchByCar(string type, string text)
        {
            switch (type)
            {
                case "Артикул":

                    return dbContext.Cars.Where(s=> s.Articul.Contains(text)).ToList().Select(s =>
                    {
                        var characteristics = dbContext.CharacteristicCars.Where(t => t.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });

                    break;
                case "Модель":

                    return dbContext.Cars.Where(s => s.Model.ModelName == text).ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.ModelName == text); 
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });

                    break;
                case "Марка":

                    return dbContext.Cars.Where(s => s.Model.Mark.MarkName == text).ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.MarkName == text);
                        return GetMarkApi(s, characteristics, model, mark);
                    });

                    break;

                case "Цена":

                    return dbContext.Cars.Where(s => s.CarPrice.ToString() == text).ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });
                    break;

                default:

                    return dbContext.Cars.ToList().Select(s => {
                        var characteristics = dbContext.CharacteristicCars.Where(p => p.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
                        var model = dbContext.Models.FirstOrDefault(t => t.ModelName == text);
                        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
                        return GetMarkApi(s, characteristics, model, mark);
                    });
                    break;
            }
        }

        
        //public static async Task<CarApi> SearchCarAsync<CarApi>(int id, string? text, string controller)
        //{
        //    var answer = await client.GetAsync(server + controller + $"/ModelName, MarkName, Articul, CarPrice?type={id}&text={text}");
        //    string answerText = await answer.Content.ReadAsStringAsync();
        //    var result = (CarApi)JsonSerializer.Deserialize(answerText, typeof(CarApi), jsonOptions);
        //    return result;
        //}


        // GET: api/<CarController>
        //[HttpGet]
        //public IEnumerable<CarApi> Get()
        //{
        //    return dbContext.Cars.ToList().Select(s =>
        //    {
        //        var characteristics = dbContext.CharacteristicCars.Where(t => t.CarId == s.Id).Select(t => (CharacteristicApi)t.Characteristic).ToList();
        //        var model = dbContext.Models.FirstOrDefault(t => t.Id == s.ModelId);
        //        var mark = dbContext.MarkCars.FirstOrDefault(i => i.Id == model.MarkId);
        //        return GetMarkApi(s, characteristics, model, mark);
        //    });
        //}

        //[HttpGet]
        //public IEnumerable<CharacteristicCarApi> Get()
        //{
        //    return dbContext.CharacteristicCars.Select(t => (CharacteristicCarApi)t).ToList().Select(s => 
        //    {
        //        var characteristic = dbContext.Characteristics.FirstOrDefault(c=> c.Id == s.CharacteristicId);
        //        var unit = dbContext.Units.FirstOrDefault(u=> u.Id == characteristic.UnitId);
        //        return GetCharacteristicCross(s, characteristic, unit);
        //    });
        //}

            foreach (CarApi carApi in Cars)
            {
                carApi.CarOptions = "";
                foreach (var options in carApi.CharacteristicCars)
                {
                    options.Characteristic = Characteristics.FirstOrDefault(s => s.ID == options.CharacteristicId);
                    if (options != carApi.CharacteristicCars.Last())
                        carApi.CarOptions += $"{options.Characteristic.CharacteristicName} {options.CharacteristicValue}, \n";
                    else
                        carApi.CarOptions += $"{options.Characteristic.CharacteristicName} {options.CharacteristicValue}";
                }
                SignalChanged(nameof(carApi.CarOptions));
            }

                   <!--<ListView Grid.Row="9" ItemsSource="{Binding CharacteristicsCar}" SelectedItem="{Binding SelectedCharacteristicCar}">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Характеристика" Width="150" DisplayMemberBinding="{Binding Characteristic.CharacteristicName}"/>
                                <GridViewColumn Header="Значение характеристики" Width="150" DisplayMemberBinding="{Binding CharacteristicValue}"/>
                                <GridViewColumn Header="Ед. измерения" DisplayMemberBinding="{Binding Characteristic.Unit.UnitName}"/>
                            </GridView>
                        </ListView.View>
                    </ListView>-->

        [HttpGet("Type, Text")]
        public IEnumerable<CarApi> SearchByCar(string type, string text)
        {
            switch (type)
            {
                case "Артикул":

                    return dbContext.Cars.Where(s=> s.Articul.Contains(text)).ToList().Select(s =>
                    {
                        return GetCar(s);
                    });

                    break;
                case "Модель":

                    return dbContext.Cars.Where(s => s.Model.ModelName.ToLower().Contains(text)).ToList().Select(s =>
                    {
                        return GetCar(s);
                    });

                    break;
                case "Марка":

                    return dbContext.Cars.Where(s => s.Model.Mark.MarkName.ToLower().Contains(text)).ToList().Select(s => 
                    {
                        return GetCar(s);
                    });

                    break;

                case "Цена":

                    return dbContext.Cars.Where(s => s.CarPrice.ToString().ToLower().Contains(text)).ToList().Select(s => 
                    {
                        return GetCar(s);
                    });
                    break;

                default:

                    return dbContext.Cars.ToList().Select(s => 
                    {
                        return GetCar(s);
                    });
                    break;
            }
        }

        public class AddCharacteristicViewModel : BaseViewModel
    {
        public List<UnitApi> AllUnits { get; set; } = new List<UnitApi>();
        public List<CharacteristicApi> Characteristics { get; set; } = new List<CharacteristicApi>();

        public UnitApi SelectedUnitThis { get; set; }

        public UnitApi SelectedUnit { get; set; }
        public CharacteristicApi AddCharacteristicVM { get; set; }

        private string searchText = "";
        public string SearchText
        {
            get => searchText;
            set
            {
                searchText = value;
                SeacrhUnit();
            }
        }

        private string selectedSearchType { get; set; }
        public string SelectedSearchType
        {
            get => selectedSearchType;
            set
            {
                selectedSearchType = value;
                SeacrhUnit();
            }
        }

        private List<UnitApi> searchResult;
        private List<UnitApi> FullUnits;

        public ObservableCollection<UnitApi> SelectedUnits { get; set; } = new ObservableCollection<UnitApi>();

        public string NameUnit { get; set; }

        public CustomCommand Cancel { get; set; }
        public CustomCommand Save { get; set; }
        public CustomCommand AddUnit { get; set; }
        public CustomCommand RemoveUnit { get; set; }
        public CustomCommand CreateUnit { get; set; }

        public AddCharacteristicViewModel(CharacteristicApi characteristic)
        {

            SelectedSearchType = "Единица измерения";
            Task.Run(GetList);

            GetCharacteristic(characteristic);

            if (characteristic == null)
            {
                AddCharacteristicVM = new CharacteristicApi();
            }
            else
            {
                AddCharacteristicVM = new CharacteristicApi
                {
                    ID = characteristic.ID,
                    CharacteristicName = characteristic.CharacteristicName,
                    Unit = characteristic.Unit,
                    UnitId = characteristic.UnitId
                };

                GetCharacteristic(AddCharacteristicVM);

                SelectedUnitThis = AddCharacteristicVM.Unit;
            }

            CreateUnit = new CustomCommand(() =>
            {
                if(SelectedUnit == null)
                {
                    AddUnitWindow unitWindow = new AddUnitWindow();
                    unitWindow.ShowDialog();
                    GetList();
                    SignalChanged(nameof(SelectedUnit));
                }
                else
                {
                    AddUnitWindow unitWindow = new AddUnitWindow(SelectedUnit);
                    unitWindow.ShowDialog();
                    GetList();
                    SignalChanged(nameof(SelectedUnit));
                }
            });

            AddUnit = new CustomCommand(() =>
            {
                if(SelectedUnit == null)
                {
                    SendMessage("Вы не выбрали единицу измерения");
                }
                else
                {
                    AddCharacteristicVM.Unit = SelectedUnit;
                    AddCharacteristicVM.Unit.UnitName = SelectedUnit.UnitName;
                    SignalChanged(AddCharacteristicVM.Unit.UnitName);
                    SelectedUnits.Add(SelectedUnit);
                    SignalChanged(nameof(SelectedUnits));

                    if (SelectedUnits.Count > 1)
                    {
                        GetUnit();
                    }
                }
            });
            Save = new CustomCommand(() =>
            {

                if (AddCharacteristicVM.CharacteristicName == "")
                {
                    SendMessage("Не введена характеристика");
                }

                if (AddCharacteristicVM.UnitId == 0)
                {
                    SendMessage("Вы не выбрали единицу измерения");
                }

                if(AddCharacteristicVM.ID == 0)
                {
                    foreach (var e in Characteristics)
                    {
                        if (e.CharacteristicName == AddCharacteristicVM.CharacteristicName)
                        {
                            SendMessage("Такая характеристика уже существует!!!");
                        }
                        return;
                    }
                    CreateCharacteristic(AddCharacteristicVM);
                    MessageBox.Show("Создана новая характеристика");
                }
                else
                {
                    EditCharacteristic(AddCharacteristicVM);
                }

                foreach (Window window in Application.Current.Windows)
                {
                    if (window.DataContext == this)
                    {
                        CloseWindow(window);
                    }
                }
            });
        }

        public async Task GetUnit()
        {
            MessageBoxResult result = MessageBox.Show("Вы точно желаете заменить свойство?", "Подтверждение", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                SelectedUnits.Clear();
                AddCharacteristicVM.Unit = SelectedUnit;
                SelectedUnits.Add(SelectedUnit);
                SignalChanged(nameof(SelectedUnits));
                AddCharacteristicVM.UnitId = SelectedUnit.ID;
                EditCharacteristic(AddCharacteristicVM);
            }
        }

        public async Task CreateCharacteristic(CharacteristicApi characteristicApi)
        {
            var characteristic = await Api.PostAsync<CharacteristicApi>(characteristicApi, "Characteristic");
        }

        public async Task EditCharacteristic(CharacteristicApi characteristicApi)
        {
            var characteristic = await Api.PutAsync<CharacteristicApi>(characteristicApi, "Characteristic");
        }

        private async Task GetList()
        {
            Characteristics = await Api.GetListAsync<List<CharacteristicApi>>("Characteristic");
            var list = await Api.GetListAsync<List<UnitApi>>("Unit");
            AllUnits = new List<UnitApi>(list);
            FullUnits = AllUnits;
            SignalChanged(nameof(AllUnits));
        }

        public async Task GetCharacteristic(CharacteristicApi characteristicApi)
        {
            
            AllUnits = await Api.GetListAsync<List<UnitApi>>("Unit");
            AddCharacteristicVM.Unit = SelectedUnit;

            if (characteristicApi == null)
            {
                SelectedUnits = new ObservableCollection<UnitApi>();
                SelectedUnit = AllUnits.FirstOrDefault();
                SelectedUnitThis = SelectedUnits.FirstOrDefault();
            }

            else
            {
                GetUnits(characteristicApi);
                //SelectedUnits = AllUnits.Where(s => s.ID == characteristicApi.UnitId);
            }

            SignalChanged(nameof(SelectedUnits));
            SelectedUnitThis = SelectedUnits.FirstOrDefault(s => s.ID == characteristicApi.UnitId);
            SignalChanged(nameof(SelectedUnit));
        }

        private async Task SeacrhUnit()
        {
            var search = SearchText.ToLower();
            searchResult = await Api.SearchAsync<List<UnitApi>>(SelectedSearchType, search, "Unit");
            UpdateList();
        }

        public async Task GetUnits(CharacteristicApi characteristic)
        {
            var list = await Api.GetListAsync<List<UnitApi>>("Unit");
            var l = list.Where(s=> s.ID == characteristic.UnitId);
            SelectedUnits = new ObservableCollection<UnitApi>(l);
            SignalChanged(nameof(SelectedUnits));
        }

        private async Task UpdateList()
        {
            AllUnits = searchResult;
            SignalChanged(nameof(searchResult));
        }

        public void CloseWindow(object obj)
        {
            Window window = obj as Window;
            window.Close();
        }

        public void SendMessage(string message)
        {
            UIManager.ShowMessage(new Dialogs.MessageBoxDialogViewModel
            {
                Message = message,
                OkText = "ОК",
                Title = "Ошибка!"
            });
            return;
        }
    }

    <Grid Background="WhiteSmoke">
        <Border BorderThickness="5" BorderBrush="{StaticResource ValorantRedBrush}" 
                Panel.ZIndex="2">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="45"/>
                        <RowDefinition Height="45"/>
                        <RowDefinition Height="45"/>
                        <RowDefinition Height="45"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Margin="0 10 0 0">
                        <Label Content="Характеристика" FontFamily="{StaticResource CenturyGothicBold}" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
                    </StackPanel>

                    <Label Content="Название:" Grid.Row="1" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                    <TextBox DataContext="{Binding AddCharacteristicVM}" Text="{Binding CharacteristicName}" Grid.Row="1" Width="300" Height="30" FontSize="16" HorizontalAlignment="Right" Margin="0 0 10 0" VerticalAlignment="Center"/>

                    <StackPanel Grid.Row="2" Margin="0 10 0 0">
                        <Rectangle HorizontalAlignment="Stretch"  Fill="Gray" Height="0.5" Width="370"/>
                        <Label Content="Единица измерения" FontFamily="{StaticResource CenturyGothicBold}" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
                    </StackPanel>

                    <Label Content="Поиск:" Grid.Row="3" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                    <TextBox Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" Grid.Row="3" Width="300" Height="30" FontSize="16" HorizontalAlignment="Right" Margin="0 0 10 0" VerticalAlignment="Center"/>

                    <Grid Grid.Row="4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <Label Content="Все" Grid.Row="0" Grid.Column="0" FontFamily="{StaticResource CenturyGothicBold}" 
                               FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
                        <Label Content="Текущая" Grid.Row="0" Grid.Column="1" FontFamily="{StaticResource CenturyGothicBold}"
                               FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>

                        <ListBox Grid.Row="1" Grid.Column="0" ItemsSource="{Binding AllUnits}" 
                                 Margin="5 0" SelectedItem="{Binding SelectedUnit}" DisplayMemberPath="UnitName">
                            <ListBox.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Добавить новую единицу измерения" Command="{Binding CreateUnit}"/>
                                    <MenuItem Header="Удалить единицу измерения" Command="{Binding DeleteUnit}"/>
                                </ContextMenu>
                            </ListBox.ContextMenu>
                        </ListBox>
                        <ListBox Grid.Row="1" Grid.Column="1" ItemsSource="{Binding SelectedUnits}" SelectedItem="{Binding SelectedUnitThis}" DisplayMemberPath="UnitName"
                                 Margin="5 0"/>

                        <Button Grid.Row="2" FontSize="18" Grid.Column="0" Style="{StaticResource RegularButton}"
                                Height="30" Margin="5" Content="Выбрать" Command="{Binding AddUnit}"/>
                        <Button Grid.Row="2" FontSize="18" Grid.Column="1" Style="{StaticResource RegularButton}"
                                Height="30" Margin="5" Content="Убрать" Command="{Binding RemoveUnit}"/>
                    </Grid>
                </Grid>

                <Button Content="Отмена" Click="Button_Click" Grid.Row="1" Height="30" Margin="5" HorizontalAlignment="Left" VerticalAlignment="Bottom"  FontFamily="Century Gothic" Foreground="Red"
                    Background="Transparent" BorderBrush="Red" FontSize="16"/>
                <Button Content="Сохранить" Command="{Binding Save}" Grid.Row="1" Height="30" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Bottom" FontFamily="Century Gothic" Foreground="Green"
                    Background="Transparent" BorderBrush="Green" FontSize="16"/>

            </Grid>

        </Border>
    </Grid>

     <Border BorderThickness="5" BorderBrush="{StaticResource ValorantRedBrush}" 
                Panel.ZIndex="2">
        <Grid>

            <Grid.RowDefinitions>
                <RowDefinition Height="80"/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="50"/>
                <RowDefinition Height="50"/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="50"/>
                <RowDefinition Height="50"/>
                <RowDefinition Height="50"/>
                <RowDefinition Height="50"/>
                <RowDefinition Height="50"/>
                <RowDefinition Height="80"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Label Content="Дата заказа" Margin="0 0 0 5" Width="200" HorizontalContentAlignment="Center" FontSize="16"/>
                <DatePicker FontSize="16" DataContext="{Binding AddSaleVM}" SelectedDate="{Binding DateOfOrder, StringFormat = '{}{00:dd.MM.yyyy}'}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="200" Height="30"/>
            </StackPanel>
            <StackPanel Grid.Row="1" Margin="0 10 0 0">
                <Rectangle HorizontalAlignment="Stretch"  Fill="Gray" Height="0.5" Width="370"/>
                <Label Content="Авто" FontFamily="{StaticResource CenturyGothicBold}" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
            </StackPanel>
            <Label Grid.Row="2" Content="Фильтр:" HorizontalAlignment="Left"
                   VerticalAlignment="Center" FontSize="16" Margin="20 0 0 0"/>
            <ComboBox Grid.Row="2" FontSize="16" Style="{StaticResource ComboBoxFlatStyle}" ItemsSource="{Binding Marks}" 
                      SelectedItem="{Binding SelectedMark}" Width="200" Height="30"
                      DisplayMemberPath="MarkName" IsEditable="True" VerticalAlignment="Center"/>
            <Label Grid.Row="3" Content="Авто:" HorizontalAlignment="Left" 
                   VerticalAlignment="Center" FontSize="16" Margin="20 0 0 0"/>
            <ComboBox Grid.Row="3" FontSize="16" Style="{StaticResource ComboBoxFlatStyle}" ItemsSource="{Binding SaleCars}" 
                      SelectedItem="{Binding SelectedSaleCar}" Width="200" Height="30"
                      DisplayMemberPath="Car.CarName" IsEditable="True" VerticalAlignment="Center"/>

            <StackPanel Grid.Row="4" Margin="0 10 0 0">
                <Rectangle HorizontalAlignment="Stretch"  Fill="Gray" Height="0.5" Width="370"/>
                <Label Content="Пользователь" FontFamily="{StaticResource CenturyGothicBold}" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
            </StackPanel>

            <StackPanel Grid.Row="5" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ComboBox FontSize="16" ItemsSource="{Binding Users}" SelectedItem="{Binding SelectedUser}" VerticalAlignment="Center" DisplayMemberPath="UserName"
                          Style="{StaticResource ComboBoxFlatStyle}" Width="200" Height="30"/>
            </StackPanel>

            <StackPanel Grid.Row="6" Margin="0 10 0 0">
                <Rectangle HorizontalAlignment="Stretch"  Fill="Gray" Height="0.5" Width="370"/>
                <Label Content="Операция с товаром" FontFamily="{StaticResource CenturyGothicBold}" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
            </StackPanel>

            <StackPanel Grid.Row="7" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ComboBox FontSize="16" ItemsSource="{Binding ActionTypes}" SelectedItem="{Binding SelectedActionType}" VerticalAlignment="Center" DisplayMemberPath="ActionTypeName"
                          Style="{StaticResource ComboBoxFlatStyle}" Width="200" Height="30"/>
            </StackPanel>

            <StackPanel Grid.Row="8" Margin="0 10 0 0">
                <Rectangle HorizontalAlignment="Stretch"  Fill="Gray" Height="0.5" Width="370"/>
                <Label Content="Операция с товаром" FontFamily="{StaticResource CenturyGothicBold}" FontSize="18" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"/>
            </StackPanel>

            <StackPanel Grid.Row="9" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ComboBox FontSize="16" ItemsSource="{Binding ActionTypes}" SelectedItem="{Binding SelectedActionType}" VerticalAlignment="Center" DisplayMemberPath="ActionTypeName"
                          Style="{StaticResource ComboBoxFlatStyle}" Width="200" Height="30"/>
            </StackPanel>

            <StackPanel Grid.Row="10" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Label Content="Цена комплектации" Margin="0 0 0 5" Width="200" HorizontalContentAlignment="Center" FontSize="16"/>
                <TextBox DataContext="{Binding AddSaleVM}" Text="{Binding EquipmentPrice, StringFormat={}{0:N2}}" VerticalAlignment="Center" HorizontalAlignment="Center" Height="30" Width="200" FontSize="16"/>
            </StackPanel>

            <Grid Grid.Row="11" VerticalAlignment="Bottom">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Button Content="Отмена" Width="150" Command="{Binding Cancel}" Grid.Row="10" Height="30" Margin="5" HorizontalAlignment="Left" VerticalAlignment="Bottom"  FontFamily="Century Gothic" Foreground="Red"
                    Background="Transparent" BorderBrush="Red" FontSize="16"/>
                <Button Content="Сохранить" Command="{Binding Save}" Grid.Row="9" Width="150" Grid.Column="1" Height="30" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Bottom" FontFamily="Century Gothic" Foreground="Green"
                    Background="Transparent" BorderBrush="Green" FontSize="16"/>
            </Grid>
        </Grid>
    </Border>
            